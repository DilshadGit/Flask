How to stop this error:
lask run
 * Environment: production
   WARNING: Do not use the development server in a production environment.
   Use a production WSGI server instead.
 * Debug mode: off

Solution:
flask --help
export FLASK_ENV=development 
export FLASK_APP=main.py

to run the server:
python main.py or
flask run

# install wtf to create registration form
pip install flask-wtf to create form fields

To import fields type in the forms
    StringField,
    PasswordField,
    SubmitField,
    BooleanField,

Install sqllite for development and postgress for development to connect need to install flask-sqlalchemy
pip install flask-sqlalchemy

utcnow use for the default when the date are put to the database

lazy will used when the SQLAlchemy load the data from the database and True means on when load display the 
data as it loaded in one go

Process database you need to go to python shell from project enviroment and import from main file the db
to create database run:
db.create_all()

>>> from main import db
/home/dilmac/Develop/flaskenv/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:794: FSADeprecationWarning: SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and will be disabled by default in the future.  Set it to True or False to suppress this warning.
  'SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and '
>>> db.create_all()


Adding some data like user to the created db
>>> from main import db
/home/dilmac/Develop/flaskenv/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:794: FSADeprecationWarning: SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and will be disabled by default in the future.  Set it to True or False to suppress this warning.
  'SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and '
>>> from main import User, Post
>>> user_1 = User(username='dilmac', email='dilmac@gmail.com', password='admin123')
>>> db.session.add(user_1)
>>> user_2 = User(username='dilshad', email='dilshad@gmail.com', password='admin123')
>>> db.session.add(user_2)
>>> user_3 = User(username='raffie', email='raffie@gmail.com', password='admin123')
>>> db.session.add(user_3)
>>> db.session.commit()
>>> User.query.all()
[User('dilmac', 'dilmac@gmail.com', 'default.jpg'), User('dilshad', 'dilshad@gmail.com', 'default.jpg'), User('raffie', 'raffie@gmail.com', 'default.jpg')]

>>> User.query.filter_by().all()
[User('dilmac', 'dilmac@gmail.com', 'default.jpg'), User('dilshad', 'dilshad@gmail.com', 'default.jpg'), User('raffie', 'raffie@gmail.com', 'default.jpg')]
>>> User.query.filter_by().first()
User('dilmac', 'dilmac@gmail.com', 'default.jpg')
>>> user = User.query.filter_by(username='dilmac').first()
>>> user
User('dilmac', 'dilmac@gmail.com', 'default.jpg')
>>> User.query.get(1)
User('dilmac', 'dilmac@gmail.com', 'default.jpg')
check if the current user create any post
>>> user.posts
[]

Add the current user some post
>>> user.id
1
>>> post_1 = Post(title='Python Tutorials', content='Flask is usually used with the decorators. Decorators are simple and you have the URL right next to the function that is called for that specific URL. However there is a downside to this approach: it means all your code that uses decorators has to be imported upfront or Flask will never actually find your function.', user_id=user.id)
>>> post_2 = Post(title='Flask framework API', content='Flask is usually used with the decorators. Decorators are simple and you have the URL right next to the function that is called for that specific URL. However there is a downside to this approach: it means all your code that uses decorators has to be imported upfront or Flask will never actually find your function.', user_id=user.id)
>>> post_3 = Post(title='Google API', content='Flask is usually used with the decorators. Decorators are simple and you have the URL right next to the function that is called for that specific URL. However there is a downside to this approach: it means all your code that uses decorators has to be imported upfront or Flask will never actually find your function.', user_id=user.id)
>>> post_4 = Post(title='Django restframework API', content='Flask is usually used with the decorators. Decorators are simple and you have the URL right next to the function that is called for that specific URL. However there is a downside to this approach: it means all your code that uses decorators has to be imported upfront or Flask will never actually find your function.', user_id=user.id)

# Now need to add them to db 
>>> db.session.add(post_1)
>>> db.session.add(post_2)
>>> db.session.add(post_3)
>>> db.session.add(post_4)
>>> db.session.commit()

Check the db 
>>> for post in user.posts:
...     print(post.title)
...     print(post.content)
... 
Python Tutorials
Flask is usually used with the decorators. Decorators are simple and you have the URL right next to the function that is called for that specific URL. However there is a downside to this approach: it means all your code that uses decorators has to be imported upfront or Flask will never actually find your function.

Flask framework API
Flask is usually used with the decorators. Decorators are simple and you have the URL right next to the function that is called for that specific URL. However there is a downside to this approach: it means all your code that uses decorators has to be imported upfront or Flask will never actually find your function.

Google API
Flask is usually used with the decorators. Decorators are simple and you have the URL right next to the function that is called for that specific URL. However there is a downside to this approach: it means all your code that uses decorators has to be imported upfront or Flask will never actually find your function.

Django restframework API
Flask is usually used with the decorators. Decorators are simple and you have the URL right next to the function that is called for that specific URL. However there is a downside to this approach: it means all your code that uses decorators has to be imported upfront or Flask will never actually find your function.
>>> 

>>> post.author
User('dilmac', 'dilmac@gmail.com', 'default.jpg')

Delete all db
>>> db.drop_all()

# After db created in the terminal show some waring from SQLAlchemy like that:
flask run
 * Serving Flask app "main.py"
 * Environment: production
   WARNING: Do not use the development server in a production environment.
   Use a production WSGI server instead.
 * Debug mode: off
/home/dilmac/Develop/flaskenv/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:794: FSADeprecationWarning: SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and will be disabled by default in the future.  Set it to True or False to suppress this warning.
  'SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and '
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)

To stop this warining add the line after app.config['SQLALCHEMY_DATABASE_URI']

app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

to secure password for user authentication:
pip install flask-bcrypt 

flask_pro$ python
Python 3.6.6+ (default, Aug 30 2018, 09:41:10) 
[GCC 8.0.1 20180414 (experimental) [trunk revision 259383]] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> from flask_bcrypt import Bcrypt
>>> bcrypt = Bcrypt()
>>> bcrypt.generate_password_hash('testing')
b'$2b$12$Xy3saFWamOuFQHzVBu6VzeLqcYwVWIpDUaXnTVHh/ai1E2agFakIy'
>>> bcrypt.generate_password_hash('testing').decode('utf-8')
'$2b$12$5HE3jgJhuri0Y/a5gMmPQePBpqZMMzn.R6kztQyVkO7SPsSozy/E6'
>>> bcrypt.generate_password_hash('testing').decode('utf-8')
'$2b$12$VfTSCK8wcyyPTzj//EtX5.B8xNZQQEwl8JuW4YM.OPx237swVpE4C'
>>> bcrypt.generate_password_hash('testing').decode('utf-8')
'$2b$12$Penj7xF0.kMhFymx9sG5yOHqCqm70.ckjIlerZIa5vxB.L8ZqWSs.'

>>> bcrypt.check_password_hash(hashed_pwd, 'mypassword')
False
>>> bcrypt.check_password_hash(hashed_pwd, 'testing')
True
>>> hashed_pwd = bcrypt.generate_password_hash('my_tutorials').decode('utf-8')
>>> bcrypt.check_password_hash(hashed_pwd, 'testing')
False
>>> bcrypt.check_password_hash(hashed_pwd, 'mypassword')
False
>>> bcrypt.check_password_hash(hashed_pwd, 'my_tutorials')
True
>>> hashed_pwd = bcrypt.generate_password_hash('my_tutorials').decode('utf-8')
>>> hashed_pwd
'$2b$12$07kPEp4AByjF95WMOe4F.eX/rKZi61Cppnngureb8zYRsgMW56oPe'
>>> 

in the __init__ file add following:
from flask_bcrypt import Bcrypt

Next
bcrypt = Bcrypt(app)

add to the routes following
from flaskpro import  db, bcrypt 

next we need to make sure the registration form not allowed taked username and email address to reregiter to db.

pip install flask-login